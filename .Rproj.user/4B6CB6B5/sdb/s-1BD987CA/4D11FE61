{
    "collab_server" : "",
    "contents" : "#' Calculate a D score based on vectors of means, SDs, and Ns\n#'\n#' @param m1 mean of block 1\n#' @param m2 mean of block 2\n#' @param sd1 standard deviation of block 1\n#' @param sd2 standard deviation of block 2\n#' @param n1 n (count) of block 1\n#' @param n2 n (count) of block 2\n#'\n#' @return vector of D scores\n#'\n#' @importFrom dplyr '%>%'\n#'\n#' @export\ndScore <- function(m1, m2, sd1, sd2, n1, n2){\n  # with a set of block mean latencies, sds, and ns, returns a d score\n  numerator <- m1-m2\n  denominator <- sqrt( ( ( (n1-1)*sd1^2+(n2-1)*sd2^2) +\n                           ( (n1+n2) * ((m1-m2)^2 ) / 4) ) / (n1+n2-1))\n  d <- numerator/denominator\n  return(d)\n}\n\n#' Score IAT\n#'\n#' @description Processes IAT experimental data and returns D score and\n#' appropriate statistics\n#'\n#' @param df Experimental dataframe.  Must contain columns subject,\n#' @param excludedsubjects a vector of excluded subject numbers\n#' @param platform experimental platform (default = \"inquisit\")\n#'\n#' @return a list of data.frames\n#' @export\n#' @import dplyr\n#' @import tidyr\nscoreIAT <- function(df, platform = \"inquisit\"){\n  df <- df %>%\n    dplyr::mutate(pairing = forcats::fct_recode(blockcode,\n                                                \"1\" = \"attributepractice\",\n                                                '2' = \"targetcompatiblepractice\",\n                                                '3' = \"compatibletest1\",\n                                                '4' = \"compatibletest2\",\n                                                '5' = \"targetincompatiblepractice\",\n                                                '6' = \"incompatibletest1\",\n                                                '7' = \"incompatibletest2\")\n    )\n\n  tbl_D_calc_statistics_long <- df %>%\n    select(subject, pairing, latency) %>%\n    group_by(subject, pairing) %>%\n    summarize(mean_latency = mean(latency),\n              sd_latency = sd(latency),\n              n_trials = n()) %>%\n    filter(!is.na(pairing) & !is.na(mean_latency) & !is.na(sd_latency) & !is.na(n_trials))\n  # Separately spread statistics into wide form and rename the variables appropriately\n  # (there are better ways to do this, but it's not worth rewriting)\n\n  temp1 <- tbl_D_calc_statistics_long %>% select(subject, pairing, mean_latency) %>% spread(pairing, mean_latency)\n  temp2 <- tbl_D_calc_statistics_long %>% select(subject, pairing, sd_latency) %>% spread(pairing, sd_latency)\n  temp3 <- tbl_D_calc_statistics_long %>% select(subject, pairing, n_trials) %>% spread(pairing, n_trials)\n  names(temp1) <- c(\"subject\", paste(\"lat\", 1:7, sep=\"\"))\n  names(temp2) <- c(\"subject\", paste(\"sd\", 1:7, sep=\"\"))\n  names(temp3) <- c(\"subject\", paste(\"n\", 1:7, sep=\"\"))\n\n  # Join temporary tables into one wide-form table\n  tbl_D_calc_statistics <- temp1 %>% left_join(temp2) %>% left_join(temp3)\n\n  # # IAT calculations # #\n\n  tbl_D_calc_statistics$dPractice <- with(tbl_D_calc_statistics, dScore(lat6, lat3, sd6, sd3, n6, n3))\n  tbl_D_calc_statistics$dTest <- with(tbl_D_calc_statistics, dScore(lat7, lat4, sd7, sd4, n7, n4))\n  tbl_D_calc_statistics$dAll <- (.5*tbl_D_calc_statistics$dPractice+.5*tbl_D_calc_statistics$dTest)\n\n\n  # Create a variable that indicates whether or not a dataset is complete\n  tbl_D_calc_statistics$complete <- !is.na(rowSums(tbl_D_calc_statistics))\n\n  tbl_D_calc_statistics$meanLat <- with(tbl_D_calc_statistics, (lat3+lat4+lat6+lat7)/4)\n\n  return(data.frame(tbl_D_calc_statistics))\n}\n\n#' Flag subjects for excessive speed\n#'\n#' @param df dataframe containing columns subject, pairing, and latency\n#' @param threshold value (in seconds) to assess as a speed threshold (i.e. trials under 300ms)\n#' @param criterion value (as proportion) above which to flag a subject for discard, i.e. .10 of trials under 300ms\n#'\n#' @return a vector of subjects, proportion under threshold, and flag (logical)\n#' @export\n#' @importFrom dplyr %>%\niat_flagSpeed <- function(df, threshold = .3, criterion = .1){\n  df %>%\n    dplyr::select(subject, pairing, latency) %>%\n    dplyr::filter(pairing %in% c(\"3\",\"4\",\"6\",\"7\")) %>% # only examine in paired blocks\n    dplyr::group_by(subject) %>%\n    dplyr::summarize(meanUnderThreshold = mean(latency <= threshold), # returns proportion under 300ms\n                     flag = mean(latency <= threshold) > criterion)\n}\n\n\n#' Flag Error Rate (IAT)\n#'\n#' @param df dataframe containing subject number, pairing, and correct (1/0 or T/F)\n#' @param criterion maximum acceptable error rate\n#'\n#' @return dataframe of subject numbers and flag values (true/false)\n#' @export\n#' @importFrom dplyr %>%\n#'\n#' @examples\niat_flagError <- function(df, criterion){\n  flag_data <- df %>%\n    dplyr::select(subject, pairing, correct) %>%\n    dplyr::group_by(subject, pairing) %>%\n    dplyr::summarize(error_rate = mean(1-correct)) %>%\n    dplyr::group_by(subject) %>%\n    dplyr::summarize(flag = max(error_rate) >= criterion)\n  return(flag_data)\n}\n",
    "created" : 1488094361793.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "14|45|21|0|\n",
    "hash" : "2308303727",
    "id" : "4D11FE61",
    "lastKnownWriteTime" : 1488222866,
    "last_content_update" : 1488222866294,
    "path" : "~/tabula/projects/cogkit/R/IAT.R",
    "project_path" : "R/IAT.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}